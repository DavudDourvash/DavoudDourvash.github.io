data(citytemp)
hc <- highchart() %>%
hc_plotOptions(line = list(color = "blue",
marker = list(
fillColor = "white",
lineWidth = 2,
lineColor = NULL
)
)) %>%
hc_add_series(name = "Tokyo", data = citytemp$tokyo) %>%
hc_add_series(name = "London", data = citytemp$london,
marker = list(fillColor = "black"))
hc
# override the `blue` option with the explicit parameter
hc %>%
hc_add_series(name = "London",
data = citytemp$new_york,
color = "red")
library(highcharter)
library(highcharter)
source('F:/Daycher_Shiny/timelinetest.R', echo=TRUE)
body <- dashboardBody(
fluidRow(
box(title = "Box title", "Box content"),
box(status = "warning", "Box content")
),
fluidRow(
box(
title = "Title 1", width = 4, solidHeader = TRUE, status = "primary",
"Box content"
),
box(
title = "Title 2", width = 4, solidHeader = TRUE,
"Box content"
),
box(
title = "Title 1", width = 4, solidHeader = TRUE, status = "warning",
"Box content"
)
),
fluidRow(
box(
width = 4, background = "black",
"A box with a solid black background"
),
box(
title = "Title 5", width = 4, background = "light-blue",
"A box with a solid light-blue background"
),
box(
title = "Title 6",width = 4, background = "maroon",
"A box with a solid maroon background"
)
)
)
# We'll save it in a variable `ui` so that we can preview it in the console
ui <- dashboardPage(
dashboardHeader(title = "Row layout"),
dashboardSidebar(),
body
)
# Preview the UI in the console
shinyApp(ui = ui, server = function(input, output) { })
library(shinydashboard)
library(shinydashboard)
library(shiny); runApp('F:/Daycher_Shiny/sampleBoxes.R')
source('F:/Daycher_Shiny/hcamptest.R', echo=TRUE)
source('F:/Daycher_Shiny/DaycherShiny/circle packing chart example.R', echo=TRUE)
library(shiny)
library(shinyjs)
jsResetCode <- "shinyjs.reset = function() {history.go(0)}" # Define the js method that resets the page
shinyApp(
ui = fluidPage(
useShinyjs(),                                           # Include shinyjs in the UI
extendShinyjs(text = jsResetCode),                      # Add the js code to the page
actionButton("reset_button", "Reset Page")
),
server = function(input, output) {
observeEvent(input$reset_button, {js$reset()})          # Call the method from
# somewhere within the server
})
system.time()
Sys.time()
library(shiny)
library(shinyjs)
jsResetCode <- "shinyjs.reset = function() {history.go(0)}" # Define the js method that resets the page
shinyApp(
ui = fluidPage(
useShinyjs(),                                           # Include shinyjs in the UI
extendShinyjs(text = jsResetCode),                      # Add the js code to the page
actionButton("reset_button", "Reset Page")
uiOutput("tm")
),
server = function(input, output) {
observeEvent(input$reset_button, {js$reset()})
output$tm <- renderUI({
Sys.time()
})
# Call the method from
# somewhere within the server
})
library(shiny)
library(shinyjs)
jsResetCode <- "shinyjs.reset = function() {history.go(0)}" # Define the js method that resets the page
shinyApp(
ui = fluidPage(
useShinyjs(),                                           # Include shinyjs in the UI
extendShinyjs(text = jsResetCode),                      # Add the js code to the page
actionButton("reset_button", "Reset Page"),``
uiOutput("tm")
),
server = function(input, output) {
observeEvent(input$reset_button, {js$reset()})
output$tm <- renderUI({
Sys.time()
})
# Call the method from
# somewhere within the server
})
library(shiny)
library(shinyjs)
jsResetCode <- "shinyjs.reset = function() {history.go(0)}" # Define the js method that resets the page
shinyApp(
ui = fluidPage(
useShinyjs(),                                           # Include shinyjs in the UI
extendShinyjs(text = jsResetCode),                      # Add the js code to the page
actionButton("reset_button", "Reset Page"),
uiOutput("tm")
),
server = function(input, output) {
observeEvent(input$reset_button, {js$reset()})
output$tm <- renderUI({
Sys.time()
})
# Call the method from
# somewhere within the server
})
library(shiny)
library(shinyjs)
jsResetCode <- "shinyjs.reset = function() {history.go(0)}" # Define the js method that resets the page
shinyApp(
ui = fluidPage(
useShinyjs(),                                           # Include shinyjs in the UI
extendShinyjs(text = jsResetCode),                      # Add the js code to the page
actionButton("reset_button", "Reset Page"),
uiOutput("tm")
),
server = function(input, output) {
observeEvent(input$reset_button, {js$reset()})
output.tm <- renderUI({
Sys.time()
})
# Call the method from
# somewhere within the server
})
library(shiny)
library(shinyjs)
jsResetCode <- "shinyjs.reset = function() {history.go(0)}" # Define the js method that resets the page
shinyApp(
ui = fluidPage(
useShinyjs(),                                           # Include shinyjs in the UI
extendShinyjs(text = jsResetCode),                      # Add the js code to the page
actionButton("reset_button", "Reset Page"),
uiOutput("tm")
),
server = function(input, output) {
observeEvent(input$reset_button, {js$reset()})
output$tm <- renderUI({
Sys.time() %>% print()
})
# Call the method from
# somewhere within the server
})
library(shiny)
library(shinyjs)
jsResetCode <- "shinyjs.reset = function() {history.go(0)}" # Define the js method that resets the page
shinyApp(
ui = fluidPage(
useShinyjs(),                                           # Include shinyjs in the UI
extendShinyjs(text = jsResetCode),                      # Add the js code to the page
actionButton("reset_button", "Reset Page"),
uiOutput("tm")
),
server = function(input, output) {
observeEvent(input$reset_button, {js$reset()})
output$tm <- renderUI({
Sys.time() %>% dplyr::print()
})
# Call the method from
# somewhere within the server
})
library(shiny)
library(shinyjs)
library(dplyr)
jsResetCode <- "shinyjs.reset = function() {history.go(0)}" # Define the js method that resets the page
shinyApp(
ui = fluidPage(
useShinyjs(),                                           # Include shinyjs in the UI
extendShinyjs(text = jsResetCode),                      # Add the js code to the page
actionButton("reset_button", "Reset Page"),
uiOutput("tm")
),
server = function(input, output) {
observeEvent(input$reset_button, {js$reset()})
output$tm <- renderUI({
Sys.time() %>% dplyr::print()
})
# Call the method from
# somewhere within the server
})
library(shiny)
library(shinyjs)
library(dplyr)
jsResetCode <- "shinyjs.reset = function() {history.go(0)}" # Define the js method that resets the page
shinyApp(
ui = fluidPage(
useShinyjs(),                                           # Include shinyjs in the UI
extendShinyjs(text = jsResetCode),                      # Add the js code to the page
actionButton("reset_button", "Reset Page"),
uiOutput("tm")
),
server = function(input, output) {
observeEvent(input$reset_button, {js$reset()})
output$tm <- renderUI({
Sys.time() %>% print()
})
# Call the method from
# somewhere within the server
})
library(shiny)
library(shinyjs)
library(dplyr)
jsResetCode <- "shinyjs.reset = function() {history.go(0)}" # Define the js method that resets the page
shinyApp(
ui = fluidPage(
useShinyjs(),                                           # Include shinyjs in the UI
extendShinyjs(text = jsResetCode),                      # Add the js code to the page
actionButton("reset_button", "Reset Page"),
uiOutput("tm")
),
server = function(input, output) {
observeEvent(input$reset_button, {js$reset()})
output$tm <- renderUI({
Sys.time() %>% print()
})
# Call the method from
# somewhere within the server
})
library(shiny)
library(shinyjs)
library(dplyr)
jsResetCode <- "shinyjs.reset = function() {history.go(0)}" # Define the js method that resets the page
shinyApp(
ui = fluidPage(
useShinyjs(),                                           # Include shinyjs in the UI
extendShinyjs(text = jsResetCode),                      # Add the js code to the page
actionButton("reset_button", "Reset Page"),
print(Sys.time())
),
server = function(input, output) {
observeEvent(input$reset_button, {js$reset()})
# output$tm <- renderUI({
#   Sys.time() %>% print()
# })
# Call the method from
# somewhere within the server
})
library(shiny)
library(shinyjs)
library(dplyr)
jsResetCode <- "shinyjs.reset = function() {history.go(0)}" # Define the js method that resets the page
shinyApp(
ui = fluidPage(
useShinyjs(),                                           # Include shinyjs in the UI
extendShinyjs(text = jsResetCode),                      # Add the js code to the page
actionButton("reset_button", "Reset Page"),
textOutput("tm")
),
server = function(input, output) {
observeEvent(input$reset_button, {js$reset()})
output$tm <- renderText({
Sys.time() %>% print()
})
# Call the method from
# somewhere within the server
})
library(shiny)
library(shinyjs)
library(dplyr)
jsResetCode <- "shinyjs.reset = function() {history.go(0)}" # Define the js method that resets the page
shinyApp(
ui = fluidPage(
useShinyjs(),                                           # Include shinyjs in the UI
extendShinyjs(text = jsResetCode),                      # Add the js code to the page
actionButton("reset_button", "Reset Page"),
textOutput("tm"),
valueBoxOutput("cstCidBox1", width = 4)
),
server = function(input, output) {
observeEvent(input$reset_button, {js$reset()})
output$tm <- renderText({
Sys.time() %>% print()
})
output$cstCidBox1 <- renderValueBox({
# currentData()$rfmTableLists <- rfmT %>% left_join(currentData()$rfmTable[[input$cPeriod]] %>%
#                                                                                             select(CID, period, clusters_label), by = "CID")
valueBox(
h3(paste0("salam", Sys.time())),
icon = icon("bar-chart"), color = "green"
)
})
# Call the method from
# somewhere within the server
})
library(shiny)
library(shinyjs)
library(dplyr)
jsResetCode <- "shinyjs.reset = function() {history.go(0)}" # Define the js method that resets the page
shinyApp(
ui = fluidPage(
useShinyjs(),                                           # Include shinyjs in the UI
extendShinyjs(text = jsResetCode),                      # Add the js code to the page
actionButton("reset_button", "Reset Page"),
textOutput("tm"),
shinydashboard::valueBoxOutput("cstCidBox1", width = 4)
),
server = function(input, output) {
observeEvent(input$reset_button, {js$reset()})
output$tm <- renderText({
Sys.time() %>% print()
})
output$cstCidBox1 <- shinydashboard::renderValueBox({
# currentData()$rfmTableLists <- rfmT %>% left_join(currentData()$rfmTable[[input$cPeriod]] %>%
#                                                                                             select(CID, period, clusters_label), by = "CID")
valueBox(
h3(paste0("salam", Sys.time())),
icon = icon("bar-chart"), color = "green"
)
})
# Call the method from
# somewhere within the server
})
library(shiny)
library(shinyjs)
library(dplyr)
jsResetCode <- "shinyjs.reset = function() {history.go(0)}" # Define the js method that resets the page
shinyApp(
ui = fluidPage(
useShinyjs(),                                           # Include shinyjs in the UI
extendShinyjs(text = jsResetCode),                      # Add the js code to the page
actionButton("reset_button", "Reset Page"),
textOutput("tm"),
shinydashboard::valueBoxOutput("cstCidBox1", width = 4)
),
server = function(input, output) {
observeEvent(input$reset_button, {js$reset()})
output$tm <- renderText({
Sys.time() %>% print()
})
output$cstCidBox1 <- shinydashboard::renderValueBox({
# currentData()$rfmTableLists <- rfmT %>% left_join(currentData()$rfmTable[[input$cPeriod]] %>%
#                                                                                             select(CID, period, clusters_label), by = "CID")
shinydashboard::valueBox(
h3(paste0("salam", Sys.time())),
icon = icon("bar-chart"), color = "green"
)
})
# Call the method from
# somewhere within the server
})
library(shiny)
library(shinyjs)
library(dplyr)
jsResetCode <- "shinyjs.reset = function() {history.go(0)}" # Define the js method that resets the page
shinyApp(
ui = fluidPage(
useShinyjs(),                                           # Include shinyjs in the UI
extendShinyjs(text = jsResetCode),                      # Add the js code to the page
actionButton("reset_button", "Reset Page"),
textOutput("tm"),
shinydashboard::valueBoxOutput("cstCidBox1", width = 4)
),
server = function(input, output) {
observeEvent(input$reset_button, {js$reset()})
output$tm <- renderText({
Sys.time() %>% print()
})
output$cstCidBox1 <- shinydashboard::renderValueBox({
# currentData()$rfmTableLists <- rfmT %>% left_join(currentData()$rfmTable[[input$cPeriod]] %>%
#                                                                                             select(CID, period, clusters_label), by = "CID")
shinydashboard::valueBox(
h3(paste0("salam", Sys.time())),h4(paste("تعداد مشتریان"),
icon = icon("bar-chart"), color = "green"
)
})
# Call the method from
# somewhere within the server
})
library(shiny)
library(shinyjs)
library(dplyr)
jsResetCode <- "shinyjs.reset = function() {history.go(0)}" # Define the js method that resets the page
shinyApp(
ui = fluidPage(
useShinyjs(),                                           # Include shinyjs in the UI
extendShinyjs(text = jsResetCode),                      # Add the js code to the page
actionButton("reset_button", "Reset Page"),
textOutput("tm"),
shinydashboard::valueBoxOutput("cstCidBox1", width = 4)
),
server = function(input, output) {
observeEvent(input$reset_button, {js$reset()})
output$tm <- renderText({
Sys.time() %>% print()
})
output$cstCidBox1 <- shinydashboard::renderValueBox({
# currentData()$rfmTableLists <- rfmT %>% left_join(currentData()$rfmTable[[input$cPeriod]] %>%
#                                                                                             select(CID, period, clusters_label), by = "CID")
shinydashboard::valueBox(
h3(paste0("salam", Sys.time())),h4(paste("تعداد مشتریان")),
icon = icon("bar-chart"), color = "green"
)
})
# Call the method from
# somewhere within the server
})
?arrange
.libPaths()
library(lubridate)
library(lubridate)
vc <- c(6,3,8,6,3,8,1,2,5)
rank(vc)
vc <- c(9,7,5,3,1,2,4,6,8)
rank(vc)
df <- data.frame(x = 1:5)
transform(df, x2 = x * x, x3 = x2 * x)
plyr::mutate(df, x2 = x * x, x3 = x2 * x)
df <- data.frame(x = 1:5)
df
plyr::mutate(df, x2 = x * x, x3 = x2 * x)
transform(df, x2 = x * x, x3 = x2 * x)
install.packages("rmarkdown", type = "source")
getwd()
setwd("D:/projects/my products/teaching slides/DavoudDourvash.github.io")
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("D:/projects/my products/teaching slides/DavoudDourvash.github.io")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("D:/projects/my products/teaching slides/DavoudDourvash.github.io")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("D:/projects/my products/teaching slides/DavoudDourvash.github.io")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("D:/projects/my products/teaching slides/DavoudDourvash.github.io")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("D:/projects/my products/teaching slides/DavoudDourvash.github.io")
#render your sweet site.
rmarkdown::render_site()
#Set our working directory.
#This helps avoid confusion if our working directory is
#not our site because of other projects we were
#working on at the time.
setwd("D:/projects/my products/teaching slides/DavoudDourvash.github.io")
#render your sweet site.
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
# Chunk 1
summary(cars)
# Chunk 2
plot(cars)
library(rmarkdown)
render("Projects.Rmd", html_document())
all_output_formats(Projects.Rmd, encoding = getOption("encoding"))
all_output_formats(Projects, encoding = getOption("encoding"))
all_output_formats(_site.yml, encoding = getOption("encoding"))
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
